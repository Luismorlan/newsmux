// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type FeedOutput struct {
	FeedID string              `json:"feedId"`
	Posts  []*PostInFeedOutput `json:"posts"`
}

type FeedRefreshInput struct {
	FeedID    string               `json:"feedId"`
	Limit     int                  `json:"limit"`
	Cursor    int                  `json:"cursor"`
	Direction FeedRefreshDirection `json:"direction"`
}

type FeedsForUserInput struct {
	UserID            string              `json:"userId"`
	FeedsRefreshInput []*FeedRefreshInput `json:"feedsRefreshInput"`
}

type NewFeedInput struct {
	UserID        string  `json:"userId"`
	Name          string  `json:"name"`
	FilterSetting *string `json:"filterSetting"`
}

type NewPostInput struct {
	Title            string   `json:"title"`
	Content          string   `json:"content"`
	SourceID         string   `json:"sourceId"`
	SubSourceID      *string  `json:"subSourceId"`
	FeedsIDPublishTo []string `json:"feedsIdPublishTo"`
	SharedFromPostID *string  `json:"sharedFromPostId"`
}

type NewSourceInput struct {
	UserID string `json:"userId"`
	Name   string `json:"name"`
	Domain string `json:"domain"`
}

type NewSubSourceInput struct {
	UserID             string `json:"userId"`
	Name               string `json:"name"`
	ExternalIdentifier string `json:"externalIdentifier"`
	SourceID           string `json:"sourceId"`
}

type NewUserInput struct {
	Name string `json:"name"`
}

type PostInFeedOutput struct {
	Post   *Post `json:"post"`
	Cursor int   `json:"cursor"`
}

type SeedState struct {
	Username   string   `json:"username"`
	AvartarURL string   `json:"avartarUrl"`
	FeedIds    []string `json:"feedIds"`
	Sources    []string `json:"sources"`
}

type SeedStateInput struct {
	Username   string   `json:"username"`
	AvartarURL string   `json:"avartarUrl"`
	FeedIds    []string `json:"feedIds"`
	Sources    []string `json:"sources"`
}

type SubscribeInput struct {
	UserID string `json:"userId"`
	FeedID string `json:"feedId"`
}

type FeedRefreshDirection string

const (
	FeedRefreshDirectionTop    FeedRefreshDirection = "TOP"
	FeedRefreshDirectionBottom FeedRefreshDirection = "BOTTOM"
)

var AllFeedRefreshDirection = []FeedRefreshDirection{
	FeedRefreshDirectionTop,
	FeedRefreshDirectionBottom,
}

func (e FeedRefreshDirection) IsValid() bool {
	switch e {
	case FeedRefreshDirectionTop, FeedRefreshDirectionBottom:
		return true
	}
	return false
}

func (e FeedRefreshDirection) String() string {
	return string(e)
}

func (e *FeedRefreshDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeedRefreshDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeedRefreshDirection", str)
	}
	return nil
}

func (e FeedRefreshDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
