type Post @goModel(model: "model.Post") {
  id: String!
  createdAt: Time!
  deletedAt: Time
  title: String!
  content: String!
  subSource: SubSource!
  sharedFromPost: Post
  savedByUser: [User!]!
  publishedFeeds: [Feed!]!
  cursor: Int!
  # urls to resources
  imageUrls: [String!]!
  fileUrls: [String!]!

  # Time when crawler finished crawling this post
  crawledAt: Time

  # url from where this post is crawled
  originUrl: String

  # actual time content is generated by 3rd party website
  contentGeneratedAt: Time

  # is the post shared by another post, if true, this post will not be published if it is not published
  inSharingChain: Boolean

  # deduplicate id is generated by crawler, purely depends on logic in crawler
  deduplicateId: String!

  semanticHashing: String

  # TODO(evan): return tags, similar to semanticHashing
  # determine whenther split happens at backend or frontend
  # I'd prefer do it in backend, but in this case you cannot declare the same
  # name because gqlgen will assume that it already exist in DB and can be
  # fetched as it is.
  # run `make generate` to generate handlers, and implement that one.
  #
  # See subscriberCount for example.
}
