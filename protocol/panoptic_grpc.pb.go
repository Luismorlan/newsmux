// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataCollectClient is the client API for DataCollect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataCollectClient interface {
	Collect(ctx context.Context, in *PanopticJob, opts ...grpc.CallOption) (*PanopticJob, error)
}

type dataCollectClient struct {
	cc grpc.ClientConnInterface
}

func NewDataCollectClient(cc grpc.ClientConnInterface) DataCollectClient {
	return &dataCollectClient{cc}
}

func (c *dataCollectClient) Collect(ctx context.Context, in *PanopticJob, opts ...grpc.CallOption) (*PanopticJob, error) {
	out := new(PanopticJob)
	err := c.cc.Invoke(ctx, "/protocol.DataCollect/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCollectServer is the server API for DataCollect service.
// All implementations must embed UnimplementedDataCollectServer
// for forward compatibility
type DataCollectServer interface {
	Collect(context.Context, *PanopticJob) (*PanopticJob, error)
	mustEmbedUnimplementedDataCollectServer()
}

// UnimplementedDataCollectServer must be embedded to have forward compatible implementations.
type UnimplementedDataCollectServer struct {
}

func (UnimplementedDataCollectServer) Collect(context.Context, *PanopticJob) (*PanopticJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedDataCollectServer) mustEmbedUnimplementedDataCollectServer() {}

// UnsafeDataCollectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataCollectServer will
// result in compilation errors.
type UnsafeDataCollectServer interface {
	mustEmbedUnimplementedDataCollectServer()
}

func RegisterDataCollectServer(s grpc.ServiceRegistrar, srv DataCollectServer) {
	s.RegisterService(&DataCollect_ServiceDesc, srv)
}

func _DataCollect_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PanopticJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.DataCollect/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectServer).Collect(ctx, req.(*PanopticJob))
	}
	return interceptor(ctx, in, info, handler)
}

// DataCollect_ServiceDesc is the grpc.ServiceDesc for DataCollect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataCollect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.DataCollect",
	HandlerType: (*DataCollectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _DataCollect_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panoptic.proto",
}
